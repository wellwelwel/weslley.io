"use strict";(self.webpackChunkweslley_io=self.webpackChunkweslley_io||[]).push([[1211],{8640:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/11/18/e-mail-spoofing-prevenindo-o-envio-de-emails-atraves-do-seu-dominio","metadata":{"permalink":"/articles/2024/11/18/e-mail-spoofing-prevenindo-o-envio-de-emails-atraves-do-seu-dominio","source":"@site/content/articles/2024/11/18/e-mail-spoofing-prevenindo-o-envio-de-emails-atraves-do-seu-dominio.mdx","title":"Prevenindo o envio de emails maliciosos atrav\xe9s do seu dom\xednio","description":"Banner","date":"2024-11-18T00:00:00.000Z","tags":[{"inline":false,"label":"Seguran\xe7a","permalink":"/articles/tags/security","description":"Security tag description"},{"inline":false,"label":"DNS","permalink":"/articles/tags/dns","description":"DNS tag description"},{"inline":false,"label":"Intermedi\xe1rio","permalink":"/articles/tags/intermediary","description":"Intermediary tag description"}],"readingTime":3.77,"hasTruncateMarker":true,"authors":[{"name":"Weslley Ara\xfajo","title":"Desenvolvedor ativo no ecossistema open source, co-mantenedor do MySQL2 e criador do Poku \u2728","url":"/","socials":{"linkedin":"https://www.linkedin.com/in/wellwelwel/","github":"https://github.com/wellwelwel","instagram":"https://www.instagram.com/wellwelwel","youtube":"https://youtube.com/@weslleyio"},"imageURL":"/img/avatar.png","key":"wellwelwel","page":null}],"frontMatter":{"title":"Prevenindo o envio de emails maliciosos atrav\xe9s do seu dom\xednio","authors":["wellwelwel"],"tags":["security","dns","intermediary"]},"unlisted":false,"lastUpdatedAt":1755478132000,"nextItem":{"title":"Introduzindo Testes Unit\xe1rios para Devs Iniciantes","permalink":"/articles/2024/03/22/tutorial-introduzindo-testes-unitarios-para-devs-iniciantes"}},"content":"import { Parallax } from \'@site/src/components/Parallax\';\\n\\n<Parallax tiltMaxAngleX={0} perspective={1920}>\\n  ![Banner](./banner.png)\\n</Parallax>\\n\\nSabia que pessoas mal intencionadas podem estar usando seu dom\xednio para enviar e-mails falsos?\\n\\n{/* truncate */}\\n\\nEssa t\xe9cnica \xe9 conhecida como E-mail Spoofing e explora a falta de autentica\xe7\xe3o no envio de e-mails de um dom\xednio, falsificando o remetente e fazendo parecer que a mensagem foi enviada por um dom\xednio confi\xe1vel.\\n\\nTanto empresas pequenas e grandes podem ser alvos, assim como sites pessoais ou abandonados, onde o intuito pode variar desde capturar dados sens\xedveis e at\xe9 infectar dispositivos dos usu\xe1rios. Tudo isso, usando dom\xednios v\xe1lidos sem autoriza\xe7\xe3o.\\n\\nOs motivos podem variar, mas vou citar alguns super comuns que tornam essa vulnerabilidade poss\xedvel:\\n\\n- Falta de conhecimento ou at\xe9 mesmo neglig\xeancia.\\n- O provedor do dom\xednio exige um plano pago \xe0 parte para e-mails que o usu\xe1rio n\xe3o est\xe1 disposto a adquirir.\\n\\n<hr />\\n\\n## Poss\xedveis impactos negativos \ud83d\udc7e\\n\\n- Perda de credibilidade.\\n- Bloqueio por provedores de e-mail (onde at\xe9 mesmo seus e-mails v\xe1lidos podem ser afetados ao serem entregues como spam ou nem mesmo chegarem ao destinat\xe1rio).\\n- Perda do dom\xednio (den\xfancias, medidas legais ou at\xe9 mesmo pela reputa\xe7\xe3o muito prejudicada).\\n\\n<hr />\\n\\n## Como se proteger? \ud83e\udd1d\\n\\nNesse artigo, vou abordar t\xf3picos como SPF, DKIM e DMARC para proteger seu dom\xednio e evitar que pessoas maliciosas consigam acesso n\xe3o autorizado ao seu dom\xednio.\\n\\n:::tip\\nVeja tamb\xe9m como se proteger do lado do usu\xe1rio final na publica\xe7\xe3o do [LinkedIn](https://www.linkedin.com/posts/wellwelwel_j%C3%A1-recebeu-e-mails-falsos-vindos-de-activity-7264430239038992384-skUX/).\\n:::\\n\\n### DNS\\n\\nO **DNS** \xe9 onde voc\xea configura os registros relacionados ao seu dom\xednio, como subdom\xednios, redirecionamentos, envio e recebimento de e-mails, entre outros.\\n\\nAo comprar um dom\xednio, \xe9 comum usu\xe1rios se preocuparem especialmente com o IP da hospedagem. Aqui \xe9 onde mora um dos problemas, pois ao notar que o dom\xednio j\xe1 est\xe1 funcionando, o usu\xe1rio pode considerar que o trabalho j\xe1 est\xe1 completo.\\n\\nDito isso, vamos conhecer os principais registros relacionados ao e-mail:\\n\\n### MX (Mail Exchange)\\n\\nO registro **MX** \xe9 o respons\xe1vel por voc\xea receber os e-mails, direcionando-os do seu dom\xednio para o servidor respons\xe1vel por receb\xea-los (**Google Workspace**, **Zoho**, etc.).\\n\\nSem ele, os e-mails que te enviarem nunca chegar\xe3o at\xe9 voc\xea.\\n\\n### SPF\\n\\nO registro **SPF** \xe9 uma forma de dizer quais servidores est\xe3o autorizados a enviar e-mails em nome do seu dom\xednio, ajudando a evitar que pessoas mal intencionadas usem seu dom\xednio.\\n\\nEle \xe9 especialmente importante contra o E-mail Spoofing, sendo geralmente refor\xe7ado pelo par\xe2metro `~all`.\\n\\n#### Dica:\\n\\nEnquanto a maioria dos servidores de e-mail sugerem `~all` devido \xe0 flexibilidade, se seu dom\xednio j\xe1 foi v\xedtima de **E-mail Spoofing** ou voc\xea quer refor\xe7ar ainda mais sua seguran\xe7a, voc\xea pode usar `-all` para eliminar a possibilidade de aceita\xe7\xe3o por baixa prioridade de forma estrita, mas note que isso implica na complexidade das configura\xe7\xf5es do **DNS**, exigindo atualiza\xe7\xf5es manuais sempre que novos servi\xe7os de e-mail forem integrados ao seu dom\xednio.\\n\\n### DKIM\\n\\nO registro **DKIM** adiciona uma assinatura digital aos e-mails enviados pelo seu dom\xednio, permitindo que o servidor que recebe o seu e-mail verifique se a mensagem foi realmente enviada por voc\xea e n\xe3o foi alterada no caminho, sendo uma ferramenta complementar essencial ao **SPF**.\\n\\nIsso ajuda a proteger tanto a reputa\xe7\xe3o do seu dom\xednio quanto os destinat\xe1rios, al\xe9m de indiretamente evitar que seus e-mails sejam entregues como spam.\\n\\n### DMARC\\n\\nO registro **DMARC** permite que voc\xea defina como os servidores de e-mail devem tratar mensagens que falharem na valida\xe7\xe3o do SPF e do DKIM, fornecendo relat\xf3rios detalhados sobre tentativas indevidas usando seu dom\xednio, permitindo monitorar poss\xedveis abusos.\\n\\n<hr />\\n\\n## Solu\xe7\xf5es e alternativas gratuitas \ud83c\udf1f\\n\\nSe seu provedor n\xe3o possui um servidor de e-mails ou voc\xea n\xe3o pretende usar um plano pago para isso, voc\xea pode usar gratuitamente o DNS com o roteamento de e-mails da Cloudflare, redirecionando os e-mails do seu dom\xednio para outro e-mail (por exemplo, um e-mail pessoal do Gmail).\\n\\nO Zoho tamb\xe9m pode ser uma boa alternativa, n\xe3o sendo necess\xe1rio redirecionar seus e-mails e oferecendo um dashboard pr\xf3prio para os e-mails do seu dom\xednio, mas ele possui limita\xe7\xf5es de recurso em sua vers\xe3o gratuita.\\n\\n\u2014 Curtiu aprender um pouco mais sobre seguran\xe7a? \ud83d\udd10\\n\\n:::note\\nEsse artigo n\xe3o possui nenhum tipo de patroc\xednio e essas s\xe3o sugest\xf5es que uso tanto pessoalmente, como profissionalmente \ud83d\ude4b\ud83c\udffb\\n:::\\n\\n:::info\\nEsse artigo foi postado icialmente no [LinkedIn](https://www.linkedin.com/pulse/e-mail-spoofing-prevenindo-o-envio-de-emails-atrav%25C3%25A9s-do-ara%25C3%25BAjo-ff2xc/).\\n:::"},{"id":"/2024/03/22/tutorial-introduzindo-testes-unitarios-para-devs-iniciantes","metadata":{"permalink":"/articles/2024/03/22/tutorial-introduzindo-testes-unitarios-para-devs-iniciantes","source":"@site/content/articles/2024/03/22/tutorial-introduzindo-testes-unitarios-para-devs-iniciantes/index.mdx","title":"Introduzindo Testes Unit\xe1rios para Devs Iniciantes","description":"Banner","date":"2024-03-22T00:00:00.000Z","tags":[{"inline":false,"label":"Testes","permalink":"/articles/tags/tests","description":"Tests tag description"},{"inline":false,"label":"JavaScript","permalink":"/articles/tags/javascript","description":"JavaScript tag description"},{"inline":false,"label":"Iniciante","permalink":"/articles/tags/beginner","description":"Beginner tag description"}],"readingTime":6.58,"hasTruncateMarker":true,"authors":[{"name":"Weslley Ara\xfajo","title":"Desenvolvedor ativo no ecossistema open source, co-mantenedor do MySQL2 e criador do Poku \u2728","url":"/","socials":{"linkedin":"https://www.linkedin.com/in/wellwelwel/","github":"https://github.com/wellwelwel","instagram":"https://www.instagram.com/wellwelwel","youtube":"https://youtube.com/@weslleyio"},"imageURL":"/img/avatar.png","key":"wellwelwel","page":null}],"frontMatter":{"title":"Introduzindo Testes Unit\xe1rios para Devs Iniciantes","authors":["wellwelwel"],"tags":["tests","javascript","beginner"]},"unlisted":false,"lastUpdatedAt":1755478132000,"prevItem":{"title":"Prevenindo o envio de emails maliciosos atrav\xe9s do seu dom\xednio","permalink":"/articles/2024/11/18/e-mail-spoofing-prevenindo-o-envio-de-emails-atraves-do-seu-dominio"}},"content":"import { Parallax } from \'@site/src/components/Parallax\';\\n\\n<Parallax tiltMaxAngleX={0} perspective={1920}>\\n  ![Banner](./banner.png)\\n</Parallax>\\n\\nSe voc\xea \xe9 um desenvolvedor iniciante (ou n\xe3o), eu quero te mostrar que testes podem sim ser simples e que a complexidade s\xf3 vem conforme nossa pr\xf3pria necessidade.\\n\\n{/* truncate */}\\n\\n## \ud83d\udca1 Motiva\xe7\xe3o\\n\\nSe voc\xea \xe9 um desenvolvedor iniciante (_ou n\xe3o_), eu quero te mostrar que testes podem sim ser simples e que a complexidade s\xf3 vem conforme nossa pr\xf3pria necessidade, n\xe3o do _tester_.\\n\\n<hr />\\n\\n## \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf93 Introdu\xe7\xe3o ao Mundo dos Testes\\n\\nImagine um sistema onde v\xe1rios usu\xe1rios tiveram a conta invadida porque criaram senhas como \\"`1234`\\" e o sistema permitia, mesmo tendo uma valida\xe7\xe3o para isso, mas sem garantia nenhuma que essa fun\xe7\xe3o estava realmente funcionando \ud83e\udd72\\n\\nIsso facilmente seria evitado se existissem testes garantindo que a fun\xe7\xe3o que valida a senha funcionasse como deveria sempre que uma modifica\xe7\xe3o \xe9 feita no sistema, concorda? \ud83d\udd10\\n\\nMas quando um dev iniciante procura por **testes automatizados**, isso pode parecer (_ou at\xe9 **ser**_) complexo:\\n\\n- Os _**testers**_ podem exigir configura\xe7\xf5es de ambiente (especialmente quando se trata de **ESM** e **TypeScript**)\\n- Podem mudar o comportamento do ambiente de desenvolvimento\\n- Podem exigir que voc\xea adapte seu c\xf3digo para funcionar com eles\\n- E at\xe9 que voc\xea tenha um conhecimento previamente aprofundado sobre eles (documenta\xe7\xe3o) para simplesmente iniciar\\n\\n<hr />\\n\\n## \ud83d\udcda Escolhendo o _Tester_\\n\\nAtualmente, existem muitos testers, alguns focados em boas pr\xe1ticas, outros focados na produtividade, performance e por a\xed vai.\\n\\nAlguns dos mais populares:\\n\\n- **Jest**\\n- **Mocha** + **Chai**\\n- **Vitest**\\n\\nPara esse tutorial, vamos usar um _tester_ que eu criei ([**Poku**](https://github.com/wellwelwel/poku)), devido sua simplicidade, mas voc\xea pode usar qualquer um \ud83d\ude80\\n\\n### \ud83d\udce6 Instalando nosso **_Tester_**\\n\\n```bash\\nnpm i -D poku\\n```\\n\\n<hr />\\n\\n## \ud83e\uddea Por que \\"Unit\xe1rios\\"?\\n\\nAo desenvolvermos nossos c\xf3digos, \xe9 comum dividirmos tarefas pequenas em fun\xe7\xf5es menores, ent\xe3o exportamos essas fun\xe7\xf5es para us\xe1-las em v\xe1rios lugares no nosso c\xf3digo, certo?\\n\\nCriar os **testes unit\xe1rios** garante que essas _\\"fun\xe7\xf5es unit\xe1rias\\"_ sempre funcionem como esperado \ud83e\uddd9\ud83c\udffb\\n\\n> Se essa postagem for **positiva**, eu tamb\xe9m gostaria de fazer um tutorial igualmente simples para **testes de integra\xe7\xe3o** e **e2e**, focados para desenvolvedores iniciantes \ud83e\udd1d\\n\\n<hr />\\n\\n## \ud83d\udccb Criando um Projeto Simples\\n\\nVamos elaborar um projeto bem simples, onde iremos apenas validar uma senha.\\nNosso projeto precisa validar se a senha passada:\\n\\n- \u2705 \xc9 uma string\\n- \u2705 Possui ao menos oito caract\xe9res\\n- \u2705 Possui ao menos uma letra mai\xfascula\\n- \u2705 Possui ao menos uma letra min\xfascula\\n- \u2705 Possui ao menos um n\xfamero\\n\\nSe a senha for v\xe1lida, devemos retornar `true`, caso contr\xe1rio, `false`.\\n\\nPara isso, iremos criar o arquivo:\\n\\n- **src/validations.mjs**\\n\\n```ts\\nexport const validatePassword = (password) => {\\n  // Verifica se a senha \xe9 uma string\\n  if (typeof password !== \'string\') return false;\\n\\n  // Verifica se a senha possui 8 caract\xe9res ou mais\\n  if (password.trim().length < 8) return false;\\n\\n  // Verifica se a senha possui ao menos uma letra mai\xfascula\\n  if (!/[A-Z]/.test(password)) return false;\\n\\n  // Verifica se a senha possui ao menos uma letra min\xfascula\\n  if (!/[a-z]/.test(password)) return false;\\n\\n  // Verifica se a senha possui ao menos um n\xfamero\\n  if (!/[0-9]/.test(password)) return false;\\n\\n  // Retorna verdadeiro se todas as valida\xe7\xf5es acima passarem\\n  return true;\\n};\\n```\\n\\n> Visando manter o exemplo simples, n\xe3o vamos ir muito al\xe9m disso \ud83e\uddd9\ud83c\udffb\\n\\n- N\xe3o use essa fun\xe7\xe3o para c\xf3digos reais, o intuito \xe9 ser simples para focar no apredizado \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf93\\n- Voc\xea pode trocar de **src/validations.mjs** para **src/validations.js** usando o `\\"type\\": \\"module\\"` no seu arquivo **package.json** \ud83e\uddd9\ud83c\udffb\\n\\n<hr />\\n\\n## \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udd2c Entendendo os Testes\\n\\nTeoricamente, nossa fun\xe7\xe3o do projeto j\xe1 funciona, esse \xe9 o momento que a gente come\xe7a fazer v\xe1rios `console.log`, certo? **Nada disso** \ud83d\ude02\\n\\nVamos tornar o que seriam esses _\\"console logs\\"_, em testes automatizados que sempre ser\xe3o executados quando o projeto passar por uma altera\xe7\xe3o \ud83d\ude80\\n\\nComo? Usando asser\xe7\xf5es \ud83d\udc47\ud83c\udffb\\n\\n<hr />\\n\\n### \u2611\ufe0f O que s\xe3o Asser\xe7\xf5es?\\n\\nNos testes, **asser\xe7\xf5es** s\xe3o usadas para garantir que um resultado \xe9 realmente o que a gente espera.\\n\\nCada _tester_ pode ter uma forma diferente de fazer isso, mas o final costuma ser o mesmo:\\n\\n- Se nossa verifica\xe7\xe3o (asser\xe7\xe3o) n\xe3o for exatamente como o esperado, o teste ir\xe1 disparar um erro nessa asser\xe7\xe3o.\\n\\n#### \ud83d\udcdd Exemplo:\\n\\nImagine que `1 + 1` precisa retornar `2`, mas retornou `\\"11\\"`.\\n\\nQuando chegar na asser\xe7\xe3o que espera o resultado `2`, ela ir\xe1 disparar um erro no teste dizendo que esperava `2` (n\xfamero), mas recebeu `\\"11\\"` (_string_):\\n\\n```js\\nimport { assert } from \'poku\';\\n\\nassert.strictEqual(\'1\' + \'1\', 2, \'1+1 deve retornar 2\');\\n```\\n\\n<img\\n  loading=\'lazy\'\\n  width=\'474\'\\n  alt=\'Erro de asser\xe7\xe3o\'\\n  src=\'https://github.com/wellwelwel/poku/assets/46850407/f1dc1e18-7f9b-4ccb-880c-b0845464925f\'\\n/>\\n\\n- `actual`:\\n  - _\\"11\\"_ \u2014 \xc9 o retorno din\xe2mico (_soft code_) da nossa fun\xe7\xe3o ou vari\xe1vel\\n- `expected`:\\n  - _2_ \u2014 \xe9 o valor bruto (_hard code_) que deve ser retornado pelo `actual`\\n\\n> Tanto o [**Poku**](https://github.com/wellwelwel/poku) como o pr\xf3prio **Node.js** possuem o m\xe9todo `assert` com a forma de uso exatamente iguais \ud83e\uddd9\ud83c\udffb\\n>\\n> Quanto ao funcionamento, o [**Poku**](https://github.com/wellwelwel/poku) oferece uma forma simples e inteligente de executar m\xfaltiplos arquivos e descreve todas as asser\xe7\xf5es que passaram ou n\xe3o no terminal \ud83d\udc37\\n\\n#### \ud83d\udcdd Corrigindo nosso exemplo:\\n\\n```js\\nimport { assert } from \'poku\';\\n\\nassert.strictEqual(1 + 1, 2, \'1+1 deve retornar 2\');\\n```\\n\\n<img\\n  loading=\'lazy\'\\n  width=\'474\'\\n  alt=\'Asser\xe7\xe3o com sucesso\'\\n  src=\'https://github.com/wellwelwel/poku/assets/46850407/430a72eb-8d34-45f4-abc7-2f2f92e3dd8e\'\\n/>\\n\\n<hr />\\n\\n## \ud83e\uddea Criando os Testes\\n\\n> Finalmente a parte boa \ud83c\udf89\\n\\nPara isso, vamos usar a criatividade e gerar:\\n\\n- \u274c V\xe1rias senhas inv\xe1lidas para simular o comportamento tanto de usu\xe1rios usuais, como de usu\xe1rios mal intencionados\\n  - Nas senhas inv\xe1lidas, n\xf3s esperamos (`expected`) que o resultado (`actual`) seja `false`.\\n- \u2705 Senhas v\xe1lidas para garantir que nossa fun\xe7\xe3o entende que a senha deve ser v\xe1lida quando passar por todos os crit\xe9rios\\n  - Nas senhas v\xe1lidas, n\xf3s esperamos (`expected`) que o resultado (`actual`) seja `true`.\\n- \ud83d\udcdd Nada de coment\xe1rios no teste, vamos descrever o que \xe9 cada um na pr\xf3pria asser\xe7\xe3o (`message`)\\n\\nVamos criar nosso arquivo de teste:\\n\\n- **test/password.test.mjs**\\n\\n```js\\nimport { assert } from \'poku\';\\nimport { validatePassword } from \'../src/validations.mjs\';\\n\\nassert.strictEqual(\\n  validatePassword(),\\n  false,\\n  \'Valida se a senha n\xe3o for passada\'\\n);\\n\\nassert.strictEqual(\\n  validatePassword(12345678),\\n  false,\\n  \'Valida se a senha n\xe3o for uma string\'\\n);\\n\\nassert.strictEqual(\\n  validatePassword(\'\'),\\n  false,\\n  \'Valida se a senha for uma string vazia\'\\n);\\n\\nassert.strictEqual(\\n  validatePassword(\'abcd1234\'),\\n  false,\\n  \'Valida se a senha n\xe3o possuir ao menos uma letra mai\xfascula\'\\n);\\n\\nassert.strictEqual(\\n  validatePassword(\'1234EFGH\'),\\n  false,\\n  \'Valida se a senha n\xe3o possuir ao menos uma letra min\xfascula\'\\n);\\n\\nassert.strictEqual(\\n  validatePassword(\'abcdEFGH\'),\\n  false,\\n  \'Valida se a senha n\xe3o possuir ao menos um n\xfamero\'\\n);\\n\\nassert.strictEqual(\\n  validatePassword(\'abcdEF12\'),\\n  true,\\n  \'Valida se a senha for v\xe1lida\'\\n);\\n```\\n\\n- Voc\xea pode trocar de **test/password.test.mjs** para **test/password.test.js** usando o `\\"type\\": \\"module\\"` no seu arquivo **package.json** \ud83e\uddd9\ud83c\udffb\\n\\n<hr />\\n\\n## \ud83d\udd2c Verificando se os Testes Passaram\\n\\n```bash\\nnpx poku\\n```\\n\\n- Ao executar o comando `npx poku`, por padr\xe3o, o _tester_ ir\xe1 procurar por todos os arquivos com a exten\xe7\xe3o `*.test.*` ou `*.spec.*` no diret\xf3rio em que o comando foi executado \ud83e\uddd9\ud83c\udffb\\n\\nE finalmente, nosso resultado:\\n\\n<img\\n  loading=\'lazy\'\\n  width=\'522\'\\n  alt=\'Exemplo de Sucesso com o Poku\'\\n  src=\'https://github.com/wellwelwel/poku/assets/46850407/f06105a3-f956-473f-b456-26c1e27d80db\'\\n/>\\n\\n- A primeira sa\xedda mostra em qual diret\xf3rio o [**Poku**](https://github.com/wellwelwel/poku) est\xe1 procurando por testes\\n- A segunda sa\xedda mostra o arquivo que est\xe1 sendo testado no momento\\n  - Dentro de cada arquivo de teste, ele ir\xe1 mostrar todas as asser\xe7\xf5es que possu\xedrem uma mensagem\\n  - Ao finalizar, seja com sucesso ou erro, ele ir\xe1 mostrar o comando que ele executou para o arquivo testado:\\n    - `node test/password.test.mjs`\\n- Quando todos os arquivos de testes terminarem, ele ir\xe1 mostrar um resumo de quantos arquivos passaram e/ou falharam\\n- No final, o c\xf3digo de sa\xedda ser\xe1:\\n  - \u2705 `0` para sucesso\\n  - \u274c `1` para falha\\n\\n<hr />\\n\\n## \ud83d\udcad Conclus\xe3o\\n\\nCom os **testes unit\xe1rios** que criamos, n\xf3s garantimos n\xe3o s\xf3 que nossa fun\xe7\xe3o funcione como deveria, como inclusive prevemos como nosso projeto reage em situa\xe7\xf5es at\xedpicas antes que elas aconte\xe7am \ud83d\udd10\\n\\n> Espero ter te provado que **testes** podem sim (!) ser **simples** \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf93\\n\\n<hr />\\n\\n- Essa foi minha primeira \\"aula\\" em formato de _blog_. Feedbacks s\xe3o sempre bem vindos \ud83e\ude75\\n- Muitos termos s\xe3o explicados repetidamente em momentos diferentes, isso \xe9 uma escolha did\xe1tica, mas podem falar caso tenha ficado cansativo \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf93\\n\\n:::info\\nEsse artigo foi postado icialmente no [TabNews](https://www.tabnews.com.br/wellwelwel/tutorial-introduzindo-testes-unitarios-para-devs-iniciantes-js).\\n:::"}]}}')}}]);